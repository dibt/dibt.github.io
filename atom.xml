<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>BentengDi&#39;Blog</title>
  
  <subtitle>Mr.Di</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://dibt.github.io/"/>
  <updated>2018-06-08T03:10:42.000Z</updated>
  <id>https://dibt.github.io/</id>
  
  <author>
    <name>Mr.Di</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>设计模式</title>
    <link href="https://dibt.github.io/2018/06/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>https://dibt.github.io/2018/06/08/设计模式/</id>
    <published>2018-06-08T02:19:51.000Z</published>
    <updated>2018-06-08T03:10:42.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java-设计模式"><a href="#java-设计模式" class="headerlink" title="java-设计模式"></a>java-设计模式</h1><hr><h3 id="单例模式-singleton"><a href="#单例模式-singleton" class="headerlink" title="单例模式-singleton"></a>单例模式-singleton</h3><p><a href="https://github.com/dibt/singleton" target="_blank" rel="noopener">高并发下线程安全的单例模式</a></p><hr><center><font color="#00dddd"><strong><em>文章持续更新</em></strong></font><br></center>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java-设计模式&quot;&gt;&lt;a href=&quot;#java-设计模式&quot; class=&quot;headerlink&quot; title=&quot;java-设计模式&quot;&gt;&lt;/a&gt;java-设计模式&lt;/h1&gt;&lt;hr&gt;
&lt;h3 id=&quot;单例模式-singleton&quot;&gt;&lt;a href=&quot;#单例模式-s
      
    
    </summary>
    
      <category term="java" scheme="https://dibt.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://dibt.github.io/tags/java/"/>
    
      <category term="设计模式" scheme="https://dibt.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>好文推荐</title>
    <link href="https://dibt.github.io/2018/06/05/%E5%A5%BD%E6%96%87%E6%8E%A8%E8%8D%90/"/>
    <id>https://dibt.github.io/2018/06/05/好文推荐/</id>
    <published>2018-06-05T09:49:25.000Z</published>
    <updated>2018-06-13T13:37:49.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="主要是自己学习过程中，感觉比较好的博客或者文章，以下是传送门"><a href="#主要是自己学习过程中，感觉比较好的博客或者文章，以下是传送门" class="headerlink" title="主要是自己学习过程中，感觉比较好的博客或者文章，以下是传送门"></a>主要是自己学习过程中，感觉比较好的博客或者文章，以下是传送门</h1><p><br>  <strong>java相关</strong></p><ul><li><a href="http://www.importnew.com/22924.html" target="_blank" rel="noopener">ReentrantLock以及AQS实现原理</a></li></ul><ul><li><a href="http://www.importnew.com/23511.html" target="_blank" rel="noopener">深入分析synchronized的实现原理</a></li></ul><ul><li><a href="http://www.importnew.com/10589.html" target="_blank" rel="noopener">深入Java内存模型</a></li></ul><ul><li><a href="https://www.ibm.com/developerworks/cn/java/j-jtp06197.html" target="_blank" rel="noopener">正确使用 Volatile 变量</a></li></ul><ul><li><a href="https://www.cnblogs.com/zhguang/p/3257367.html" target="_blank" rel="noopener">Java 内存区域和GC机制</a></li></ul><ul><li><a href="http://www.importnew.com/28263.html" target="_blank" rel="noopener">Java7/8 中的 HashMap 和 ConcurrentHashMap 全解析</a></li></ul><ul><li><a href="http://www.importnew.com/24006.html" target="_blank" rel="noopener">扒一扒ReentrantLock以及AQS实现原理</a></li></ul><p><br>  <strong>MySql相关</strong></p><ul><li><a href="http://www.cnblogs.com/whgk/p/6179612.html" target="_blank" rel="noopener">MySQL中的索引详讲</a></li></ul><ul><li><a href="http://www.importnew.com/23511.html" target="_blank" rel="noopener">mysql数据库开发常见问题及优化</a></li></ul><p><br>  <strong>others</strong></p><ul><li><a href="https://blog.csdn.net/maoyeqiu/article/details/51863584" target="_blank" rel="noopener">importNew的好文章</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;主要是自己学习过程中，感觉比较好的博客或者文章，以下是传送门&quot;&gt;&lt;a href=&quot;#主要是自己学习过程中，感觉比较好的博客或者文章，以下是传送门&quot; class=&quot;headerlink&quot; title=&quot;主要是自己学习过程中，感觉比较好的博客或者文章，以下是传送门&quot;&gt;
      
    
    </summary>
    
      <category term="好文" scheme="https://dibt.github.io/categories/%E5%A5%BD%E6%96%87/"/>
    
    
      <category term="java" scheme="https://dibt.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>时间复杂度和空间复杂度概念</title>
    <link href="https://dibt.github.io/2018/05/24/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%92%8C%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E6%A6%82%E5%BF%B5/"/>
    <id>https://dibt.github.io/2018/05/24/时间复杂度和空间复杂度概念/</id>
    <published>2018-05-24T03:10:19.000Z</published>
    <updated>2018-06-06T10:15:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>时间复杂度和空间复杂度是衡量算法的两个重要的标准。</p><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><ol><li><p>时间频度</p><p>一个算法执行所耗费的时间，从理论上是不能算出来的，必须上机运行测试才能知道。但我们不可能也没有必要对每个算法都上机测试，只需知道哪个算法花费的时间多，哪个算法花费的时间少就可以了。并且一个算法花费的时间与算法中语句的执行次数成正比例，哪个算法中语句执行次数多，它花费时间就多。</p><p><b>一个算法中的语句执行次数称为语句频度或时间频度。记为T(n)。</b></p></li><li><p>时间复杂度</p><p>在刚才提到的时间频度中，n称为问题的规模，当n不断变化时，时间频度T(n)也会不断变化。但有时我们想知道它变化时呈现什么规律。为此，我们引入时间复杂度概念。一般情况下，算法中基本操作重复执行的次数是问题规模n的某个函数，用T(n)表示，若有某个辅助函数f(n),使得当n趋近于无穷大时，T（n)/f(n)的极限值为不等于零的常数，则称f(n)是T(n)的同数量级函数。记作T(n)=Ｏ(f(n)),称Ｏ(f(n))为算法的渐进时间复杂度，简称<b>时间复杂度</b>。</p><p>时间频度不同，但时间复杂度可能相同。如：T(n)=n<sup>2</sup>+3n+4与T(n)=4n<sup>2</sup>+2n+1它们的频度不同，但时间复杂度相同，都为O(n<sup>2</sup>)。</p><p>按数量级递增排列，常见的时间复杂度有：</p><ul><li>常数阶O(1)</li><li>对数阶O(log<sub>2</sub>n)</li><li>线性阶O(n)</li><li>线性对数阶O(nlog<sub>2</sub>n)</li><li>平方阶O(n<sup>2</sup>)</li><li>立方阶O(n<sup>3</sup>)</li><li>k次方阶O(n<sup>k</sup>)</li><li>指数阶O(2<sup>n</sup>)</li></ul><p>随着问题规模n的不断增大，上述时间复杂度不断增大，算法的执行效率越低。</p></li><li><p>最坏时间复杂度和平均时间复杂度 </p><p>最坏情况下的时间复杂度称最坏时间复杂度。一般不特别说明，讨论的时间复杂度均是最坏情况下的时间复杂度。这样做的原因是：最坏情况下的时间复杂度是算法在任何输入实例上运行时间的上界，这就保证了算法的运行时间不会比任何更长。在最坏情况下的时间复杂度为T(n)=O(n)，它表示对于任何输入实例,该算法的运行时间不可能大于O(n)。</p><p>平均时间复杂度是指所有可能的输入实例均以等概率出现的情况下，算法的期望运行时间。</p><p>指数阶O(2<sup>n</sup>)，显然，时间复杂度为指数阶O(2<sup>n</sup>)的算法效率极低，当n值稍大时就无法应用。</p></li><li><p>求时间复杂度</p><p>(1)、 如果算法的执行时间不随着问题规模n的增加而增长，即使算法中有上千条语句，其执行时间也不过是一个较大的常数。此类算法的时间复杂度是O(1)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">int x=91; </span><br><span class="line">int y=100;</span><br><span class="line">while(y&gt;0)&#123;</span><br><span class="line">if(x&gt;100)&#123;</span><br><span class="line">x=x-10;</span><br><span class="line">y--;</span><br><span class="line">&#125; else </span><br><span class="line">x++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度T(n)=O(1)</p><p>这个程序看起来有点吓人，总共循环运行了1100次，但是循环的次数也是一个固定大小的常数，这段程序的运行是和n无关的，就算它再循环一万年，只是一个常数阶的函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sum = n*(n+1)/2;</span><br></pre></td></tr></table></figure><p>时间复杂度O(1)</p><p>(2)、当有若干个循环语句时，算法的时间复杂度是由嵌套层数最多的循环语句中最内层语句的频度f(n)决定的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for(int i = 0; i &lt; n; i++)&#123;</span><br><span class="line">    //程序</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度O(n)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for(int i = 0; i &lt; n; i++)&#123;</span><br><span class="line">    for(int j = 0; j &lt; n; j++)&#123;</span><br><span class="line">         //程序</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度O(n<sup>2</sup>)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for(int i = 0; i &lt; n; i++)&#123;</span><br><span class="line">    for(int j = i; j &lt; n; j++)&#123;</span><br><span class="line">         //程序</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行次数为(1+n)*n/2<br>时间复杂度O(n<sup>2</sup>)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">for(int i=1; i&lt;=n; i++)&#123;//1</span><br><span class="line">for(j=1;j&lt;=i;j++)&#123;//2</span><br><span class="line">for(k=1;k&lt;=j;k++)&#123;//3</span><br><span class="line"> //4</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>频度最大的语句是（//4），内循环的执行次数虽然与问题规模n没有直接关系，但是却与外层循环的变量取值有关，而最外层循环的次数直接与n有关，因此可以从外层循环向内层循环分析（//4）的执行次数：</p><ul><li>//1最外层的循环次数:n</li><li>//2中层的循环次数:n(n+1)/2=n<sup>2</sup>/2+n/2</li><li>//3内层的循环次数:n(n+1)(n+2)/6</li></ul><p>∑(n<sup>2</sup>/2+n/2)=∑(n<sup>2</sup>/2)+∑(n/2)=n(n+1)(n+2)/6，其中(n=1,2,3……n)</p><p><img src="./平方和公式.png" alt=""></p><p> 则内层的时间复杂度为T(n)=O(n<sup>3</sup>/6+低次项)=O(n<sup>3</sup>)</p><p>(3)、算法的时间复杂度不仅仅依赖于问题的规模，还与输入实例的初始状态有关。</p><p>在数组A[0,1,2……n-1]中查找给定值K的算法大致如下：</p><pre><code>int i=n-1;while(i&gt;=0 &amp;&amp; (A[i] != K)){ i--;//3}return i;</code></pre><p>此算法中的语句(3)的频度不仅与问题规模n有关，还与输入实例中A的各元素取值及K的取值有关:</p><p>①若A中没有与K相等的元素，则语句(3)的频度f(n)=n；</p><p>②若A的最后一个元素等于K,则语句(3)的频度f(n)是常数0。</p><p>(4)、时间复杂度评价性能</p><p>有两个算法A1和A2求解同一问题，时间复杂度分别是T1(n)=100n<sup>2</sup>，T2(n)=5n<sup>3</sup>。</p><ul><li><p>当输入量n＜20时，有T1(n)＞T2(n)，后者花费的时间较少。</p></li><li><p>随着问题规模n的增大，两个算法的时间开销之比5n<sup>3</sup>/100n<sup>2</sup>=n/20亦随着增大。即当问题规模较大时，算法A1比算法A2要有效地多。</p></li></ul></li></ol><h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><p> 一个程序的空间复杂度是指运行完一个程序所需内存的大小。利用程序的空间复杂度，可以对程序的运行所需要的内存多少有个预先估计。一个程序执行时除了需要存储空间和存储本身所使用的指令、常数、变量和输入数据外，还需要一些对数据进行操作的工作单元和存储一些为现实计算所需信息的辅助空间。程序执行时所需存储空间包括以下两部分：<br> 　　<br> (1) 固定部分，这部分空间的大小与输入/输出的数据的个数多少、数值无关。主要包括指令空间（即代码空间）、数据空间（常量、简单变量）等所占的空间。这部分属于静态空间。</p><p>(2) 可变空间，这部分空间的主要包括动态分配的空间，以及递归栈所需的空间等。这部分的空间大小与算法有关。</p><p> 一个算法所需的存储空间用f(n)表示。S(n)=O(f(n))，其中n为问题的规模，S(n)表示空间复杂度。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p> 二叉排序树又称二叉查找树，<b>这种给定值的比较次数等于给定值节点在二叉排序树中的层数</b>。如果二叉排序树是平衡的，则n个节点的二叉排序树的高度为log<sub>2</sub>n+1,(其中log<sub>2</sub>n取整数)其查找效率为O(Log<sub>2</sub>n)，近似于折半查找。如果二叉排序树完全不平衡，则其深度可达到n，查找效率为O(n)，退化为顺序查找。一般的，二叉排序树的查找性能在O(Log<sub>2</sub>n)到O(n)之间。</p><ul><li><p>一般的排序这些都不需要额外的序列内存，就在给定的序列上做排序，最多就是用一两个局部变量，这个空间复杂度就是O(1)。</p></li><li><p>二叉树遍历，用栈实现的话需要保存一些中间节点，但是最多也就保存二叉树最大深度个中间节点，所以就需要logN大小的栈，空间复杂度是O(logN)。</p></li><li><p>如果需要额外的跟原始序列一样大小的存储空间的话，空间复杂度是O(N)。一般就这三种。</p></li></ul><p>空间复杂度可以理解为除了原始序列大小的内存  在算法过程中用到的额外的存储空间。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;时间复杂度和空间复杂度是衡量算法的两个重要的标准。&lt;/p&gt;
&lt;h2 id=&quot;时间复杂度&quot;&gt;&lt;a href=&quot;#时间复杂度&quot; class=&quot;headerlink&quot; title=&quot;时间复杂度&quot;&gt;&lt;/a&gt;时间复杂度&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;时间频度&lt;/p&gt;
&lt;p&gt;一个算法
      
    
    </summary>
    
      <category term="算法" scheme="https://dibt.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://dibt.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="https://dibt.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop</title>
    <link href="https://dibt.github.io/2018/05/02/Hadoop/"/>
    <id>https://dibt.github.io/2018/05/02/Hadoop/</id>
    <published>2018-05-02T03:53:51.000Z</published>
    <updated>2018-06-06T10:16:03.000Z</updated>
    
    <content type="html"><![CDATA[<hr><center><font color="#00dddd"><strong><em>文章持续更新</em></strong></font><br></center><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;center&gt;&lt;font color=&quot;#00dddd&quot;&gt;&lt;strong&gt;&lt;em&gt;文章持续更新&lt;/em&gt;&lt;/strong&gt;&lt;/font&gt;&lt;br&gt;&lt;/center&gt;

&lt;hr&gt;

      
    
    </summary>
    
      <category term="Hadoop" scheme="https://dibt.github.io/categories/Hadoop/"/>
    
    
      <category term="大数据" scheme="https://dibt.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>数据结构-B树</title>
    <link href="https://dibt.github.io/2018/04/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-B%E6%A0%91/"/>
    <id>https://dibt.github.io/2018/04/17/数据结构-B树/</id>
    <published>2018-04-17T08:53:21.000Z</published>
    <updated>2018-04-23T04:48:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-B树"><a href="#1-B树" class="headerlink" title="1. B树"></a>1. B树</h1><h2 id="1-1-定义"><a href="#1-1-定义" class="headerlink" title="1.1 定义"></a>1.1 定义</h2><p>B树是多路平衡查找树、自平衡树<br>即“阶”定义为一个节点的子节点数目的最大值<br>m阶B-树的定义:其中m&gt;2，m的大小取决于磁盘页的大小<br>1.非叶子节点的根节点至少有2个孩子<br>2.每个非根和非叶子节点的节点至少有ceil(m/2)(ceil向上取整)个孩子，至多有M个孩子<br>3.每个非根和非叶子节点的节点至少有ceil(m/2-1)个关键字，至多有m-1个关键字，且以升序排列,<br>4.所有叶子节点都在同一层</p><hr><h2 id="1-2-B-树的查找"><a href="#1-2-B-树的查找" class="headerlink" title="1.2 B-树的查找"></a>1.2 B-树的查找</h2><p>B-树的查找类似二叉排序树的查找，所不同的是B-树每个结点上是多关键码的有序表，在到达某个结点时，先在有序表中查找，若找到，则查找成功；否<br>则，到按照对应的指针信息指向的子树中去查找，当到达叶子结点时，则说明树中没有对应的关键码。<br>在B-树中进行查找包含两种基本操作:</p><pre><code>(1) 在B-树中查找结点；(2) 在结点中查找关键字。</code></pre><p>由于B-树通常存储在磁盘上，则前一查找操作是在磁盘上进行的，而后一查找操作是在内存中进行的，即在磁盘上找到指针p所指结点后，先将结点中的信<br>息读入内存，然后再利用顺序查找或折半查找查询等于K的关键字。显然，在磁盘上进行一次查找比在内存中进行一次查找的时间消耗多得多。因此，在磁<br>盘上进行查找的次数、即待查找关键字所在结点在B-树上的层次树，是决定B树查找效率的首要因素</p><hr><h2 id="1-3-B树的插入"><a href="#1-3-B树的插入" class="headerlink" title="1.3 B树的插入"></a>1.3 B树的插入</h2><p>首先通过查找确定插入的位置。然后在恰当的叶子结点中添加关键码，如果该结点中关键码不超过m-1个，则插入成功。否则要把这个结点分裂为两个把中间的一个关键码拿出来插到结点的父结点里去。父结点也可能是满的，就需要再分裂，再往上插。最坏的情况，这个过程可能一直传到根，如果需要分裂根，由于根是没有父结点的，这时就建立一个新的根结点。插入可能导致B-树朝着根的方向生长。<br>如下图所示为3阶的B-树(图中略去叶子结点)，假设需依次插入关键字30，26，85。<br><br><img src="./a.jpg" alt=""><br>插入30，如下图所示<br><br><img src="./b.jpg" alt=""><br>插入26，如下图依次所示<br><br><img src="./c.jpg" alt=""><img src="./d.jpg" alt=""><br>插入85，如下图依次所示<br><br><img src="./e.jpg" alt=""><img src="./f.jpg" alt=""><img src="./g.jpg" alt=""></p><hr><h2 id="1-4-B树的删除"><a href="#1-4-B树的删除" class="headerlink" title="1.4 B树的删除"></a>1.4 B树的删除</h2><p> 与插入关键字相反，若在B-树上删除一个关键字，则首先应找到该关键字所在结点，并从中删除。</p><h3 id="1-4-1-假若所删关键字所在结点并非最下层的非终端结点"><a href="#1-4-1-假若所删关键字所在结点并非最下层的非终端结点" class="headerlink" title="1.4.1 假若所删关键字所在结点并非最下层的非终端结点"></a>1.4.1 假若所删关键字所在结点并非最下层的非终端结点</h3><p> 假设待删关键字为K<sub>i</sub>，此时可以用A<sub>i</sub>所指子树中的最小关键字X替代，然后删除关键字X即可。例如，在下图中删除45，可以用f结点中的50代替45，然后在f结点中删除50。<br> <br><img src="./a.jpg" alt=""><br> 删除50后的B-树如下图所示<br> <br><img src="./h.jpg" alt="" title="自己画的，将就看吧"></p><h3 id="1-4-2-若该结点为最下层的非终端结点，且其中的关键字数目不少于ceil-m-2-，则删除完成，否则要进行“合并”结点的操作"><a href="#1-4-2-若该结点为最下层的非终端结点，且其中的关键字数目不少于ceil-m-2-，则删除完成，否则要进行“合并”结点的操作" class="headerlink" title="1.4.2 若该结点为最下层的非终端结点，且其中的关键字数目不少于ceil(m/2)，则删除完成，否则要进行“合并”结点的操作"></a>1.4.2 若该结点为最下层的非终端结点，且其中的关键字数目不少于ceil(m/2)，则删除完成，否则要进行“合并”结点的操作</h3><p>合并可以分为下面三种情况去处理（<strong><em>算出结点关键字的取值范围，只要是不在范围内就进行合并操作，3阶B-树关键字的范围为[1,2]</em></strong>）<br>  (1) 被删关键字所在结点中的关键字数目不小于ceil(m/2)，则只需从该结点中删去该关键字K<sub>i</sub>和相应指针A<sub>i</sub>，树的其它部分不变，例如，从1.4.1图(a)所示<br>  B-树中删去关键字12，删除后的B-树如下图所示：<br> <br><img src="./i.jpg" alt=""><br>   (2) 被删关键字所在结点中的关键字数目等于ceil(m/2)-1，而与该结点相邻的右兄弟(或左兄弟)结点中的关键字数目大于ceil(m/2)-1，则需将其兄弟结点中<br>   的最小(或最大)的关键字上移至双亲结点中，而将双亲结点中小于(或大于)且紧靠该上移关键字的关键字下移至被删关键字所在结点中。例如，从1.4.1图(a)<br>   中删去50，需将其右兄弟结点中的61上移至e结点中，而将e结点中的53移至f，从而使f和g中关键字数目均不小于ceil(m-1)-1，而双亲结点中的关键字数目不变，结果如下图所示。<br>   <img src="./j.jpg" alt=""><br>   思考：就(2)结果图的B-树中删去关键字24之后，B-树的形状，文章最后给出。<br>   (3) 被删关键字所在结点和其相邻的兄弟结点中的关键字数目均等于ceil(m/2)-1。假设该结点有右兄弟，且其右兄弟结点地址由双亲结点中的指针A<sub>i</sub>所指，<br>   则在删去关键字之后，它所在结点中剩余的关键字和指针，加上双亲结点中的关键字K<sub>i</sub>一起，合并到 A<sub>i</sub>所指兄弟结点中(若没有右兄弟，则合并至左兄弟结点<br>   中)。例如，从(2)结果图所示 B-树中删去53，则应删去f结点，并将f中的剩余信息(指针“空”)和双亲e结点中的61一起合并到右兄弟结点g中。删除后的树如下图所示。<br>   <br><img src="./k.jpg" alt=""><br>   如果因此使双亲结点中的关键字数目小于ceil(m/2)-1，则依次类推。例如，在(3)结果图的B-树中删去关键字37之后，双亲b结点中剩余信息(“指针c”)应<br>   和其双亲a结点中关键字45一起合并至右兄弟结点e中，删除后的B-树如图下所示。<br>  <br><img src="./l.jpg" alt=""><br>  总结：<br>删除元素，移动相应元素之后，如果某结点中元素数目(即关键字数)小于ceil(m/2)-1，则需要看其某相邻兄弟结点是否丰满(结点中元素个数大于<br>ceil(m/2)-1)如果丰满，则向父节点借一个元素来满足条件；如果其相邻兄弟都刚脱贫，即借了之后其结点数目小于ceil(m/2)-1，则该结点与其相邻的某一兄弟结点进行“合并”成一个结点，以此来满足条件。</p><hr><h1 id="2-B-树"><a href="#2-B-树" class="headerlink" title="2. B+树"></a>2. B+树</h1><h2 id="2-1-定义"><a href="#2-1-定义" class="headerlink" title="2.1 定义"></a>2.1 定义</h2><p>B+树是基于B-树的，增加了如下规则：<br>(1) 有k个子树的非终端结点包含有k个关键码（B树中是k-1个关键码），每个关键码不保存数据，只用来索引，所有数据都保存在叶子节点。</p><p>(2) 所有的叶子结点中包含了全部关键码的信息，及指向含这些关键码记录的指针，且叶子结点本身按照关键字的大小自小而大顺序链接。</p><p>(3) 所有的非终端结点可以看成是索引部分，结点中仅含有其子树根结点中最大（或最小）关键码。</p><p>如图一棵3阶的B+树:<br><br><img src="./n.jpg" alt=""></p><p>通常在B+树上有两个头指针，一个指向根节点，另一个指向关键字最小的叶子节点。因此可以对B+树进行两种查找运算：一种是从最小关键字起顺序查找，另一种是从根节点开始，进行随机查找。<br>在B+树上进行随机查找、插入和删除的过程基本上与B-树类似。只是在查找时，若非终端结点上的关键码等于给定值，并不终止，而是继续向下直到叶子结点。因此，在B+树，不管查找成功与否，每次查找都是走了一条从根到叶子结点的路径。</p><h1 id="相关面试题"><a href="#相关面试题" class="headerlink" title="相关面试题"></a>相关面试题</h1><p>题目1： Mysql数据库用过吧？里面的索引是基于什么数据结构。</p><p>答：主要是基于Hash表和B+树</p><p>题目2： 很好请你说一下B+树的实现细节是什么样的？B-树和B+树有什么区别？联合索引在B+树中如何存储？</p><p>答: 首先，数据库使用树型结构来增加查询效率，并保持有序。那么，为什么不使用二叉树来实现数据结构呢，二叉树算法时间复杂度是lg(N)，查询速度和比较次数都是较小的。</p><p>实际上，查询索引操作最耗资源的不在内存中，而是磁盘IO。索引是存在磁盘上的，当数据量比较大的时候，索引的大小可能达到几个G。那么，我们利用索引进行查询的时候，不可能把索引直接加载到内存中，只能一次读取一个磁盘页，一个磁盘页对应着一个节点，一次读取操作时一个磁盘IO。在二叉树查询时，最坏的情况下查找的次数是树的高度，即IO次数为树的高度。B-树就是比二叉树“矮胖”的树。</p><p>B-树查询的次数并不比二叉树的次数小，但是相比起磁盘IO速度，内存中的比较产生的耗时就不足为提了。所以只要树的高度足够低，IO次数少，就可以提升查找性能。而每个节点中有多个元素，都只在内存中操作。所以，B+树对比B-树有如下好处：</p><p>IO次数少：B+树中间节点只存索引，不存在实际的数据，所以可以存储更多的数据。索引树更加的矮胖，IO次数更少。<br>性能稳定：B+树数据只存在于叶子节点，查询性能稳定<br>范围查询简单：B+树不需要中序遍历，遍历链表即可。</p><h1 id="MyISAM索引"><a href="#MyISAM索引" class="headerlink" title="MyISAM索引"></a>MyISAM索引</h1><h5 id="主键索引"><a href="#主键索引" class="headerlink" title="主键索引"></a>主键索引</h5><p>MyISAM引擎使用B+Tree作为索引结构，叶节点的data域存放的是数据记录的地址。</p><h5 id="辅助索引"><a href="#辅助索引" class="headerlink" title="辅助索引"></a>辅助索引</h5><p>在MyISAM中，主索引和辅助索引（Secondary key）在结构上没有任何区别，只是主索引要求key是唯一的，而辅助索引的key可以重复。<br>MyISAM中索引检索的算法为首先按照B+Tree搜索算法搜索索引，如果指定的Key存在，则取出其data域的值，然后以data域的值为地址，读取相应数据记录。MyISAM的索引方式也叫做“非聚集索引”。</p><h1 id="InnoDB索引"><a href="#InnoDB索引" class="headerlink" title="InnoDB索引"></a>InnoDB索引</h1><h5 id="主键索引-1"><a href="#主键索引-1" class="headerlink" title="主键索引"></a>主键索引</h5><p>MyISAM索引文件和数据文件是分离的，索引文件仅保存数据记录的地址。而在InnoDB中，表数据文件本身就是按B+Tree组织的一个索引结构，这棵树的叶节点data域保存了完整的数据记录。这个索引的key是数据表的主键，因此InnoDB表数据文件本身就是主索引。InnoDB的索引方式也叫做“聚集索引”。</p><h5 id="辅助索引-1"><a href="#辅助索引-1" class="headerlink" title="辅助索引"></a>辅助索引</h5><p>InnoDB的所有辅助索引都引用主键作为data域。<br>聚集索引这种实现方式使得按主键的搜索十分高效，但是辅助索引搜索需要检索两遍索引：首先检索辅助索引获得主键，然后用主键到主索引中检索获得记录。    不同存储引擎的索引实现方式对于正确使用和优化索引都非常有帮助，例如知道了InnoDB的索引实现后，就很容易明白为什么不建议使用过长的字段作为主键，因为所有辅助索引都引用主索引，过长的主索引会令辅助索引变得过大。再例如，用非单调的字段作为主键在InnoDB中不是个好主意，因为InnoDB数据文件本身是一颗B+Tree，非单调的主键会造成在插入新记录时数据文件为了维持B+Tree的特性而频繁的分裂调整，十分低效，而使用自增字段作为主键则是一个很好的选择。</p><h5 id="InnoDB索引和MyISAM索引的区别："><a href="#InnoDB索引和MyISAM索引的区别：" class="headerlink" title="InnoDB索引和MyISAM索引的区别："></a>InnoDB索引和MyISAM索引的区别：</h5><p>一是主索引的区别，InnoDB的数据文件本身就是索引文件。而MyISAM的索引和数据是分开的。</p><p>二是辅助索引的区别：InnoDB的辅助索引data域存储相应记录主键的值而不是地址。而MyISAM的辅助索引和主索引没有多大区别。</p><p>思考答案：<br><br><img src="./m.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-B树&quot;&gt;&lt;a href=&quot;#1-B树&quot; class=&quot;headerlink&quot; title=&quot;1. B树&quot;&gt;&lt;/a&gt;1. B树&lt;/h1&gt;&lt;h2 id=&quot;1-1-定义&quot;&gt;&lt;a href=&quot;#1-1-定义&quot; class=&quot;headerlink&quot; title=&quot;1.1
      
    
    </summary>
    
      <category term="数据结构" scheme="https://dibt.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://dibt.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="树" scheme="https://dibt.github.io/tags/%E6%A0%91/"/>
    
  </entry>
  
</feed>
